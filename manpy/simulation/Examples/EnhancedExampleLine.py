from manpy.simulation.imports import Machine, Source, Exit, Failure, Feature, Queue, RandomDefectStateController, ContinuosNormalDistribution
from manpy.simulation.Database import ManPyQuestDBDatabase
from manpy.simulation.Globals import runSimulation, getEntityData, G, ExcelPrinter
import time

start = time.time()

class Machine_control2(Machine):
    """
    Another approach for quality control: label is determined by features. if >= 1 feature has label "defect", the
    entity does not pass the quality inspection
    """
    def condition(self):
        activeEntity = self.Res.users[0]
        if any(activeEntity.labels):
            return True


class Failure_conditional(Failure):

    def condition(self):
        return False

# TODO currently only features that are generated by a statecontroller influence the overall label on an entity!

# Objects
S = Source("S1", "Source", interArrivalTime={"Fixed": {"mean": 0.4}}, entity="manpy.Part", capacity=1)
Löten = Machine("M0", "Löten", processingTime={"Normal": {"mean": 0.8, "stdev": 0.075, "min": 0.425, "max": 1.175}})
Q = Queue("Q", "Queue")
Kleben = Machine_control2("M1", "Kleben", processingTime={"Fixed": {"mean": 0.8, "stdev": 0.075, "min": 0.425, "max": 1.175}}, control=True)
E1 = Exit("E1", "Exit1")
# ObjectInterruption
# Löten
# continuos state controller mit negativer änderung im mean?
Spannung = Feature("Ftr0", "Feature0", victim=Löten, entity=True,
               distribution={"Feature": {"Normal": {"mean": 1.6, "stdev": 0.2}}})
Strom = Feature("Ftr1", "Feature1", victim=Löten, entity=True, dependent={"Function" : "1000*x + 1900", "x" : Spannung})
Widerstand = Feature("Ftr2", "Feature2", victim=Löten, entity=True, dependent={"Function" : "(V/I)*1000000", "V" : Spannung, "I" : Strom})
Kraft = Feature("Ftr3", "Feature3", victim=Löten,
               distribution={"Feature": {"Normal": {"mean": 180, "stdev": 30}}})
# random defect controller
s4_1 = ContinuosNormalDistribution(wear_per_step=1,
                                           break_point=None,
                                           mean_change_per_step=0.0,
                                           initial_mean=400,
                                           std=50,
                                           defect_mean=10,
                                           defect_std=5
                                           )

s4_2 = ContinuosNormalDistribution(wear_per_step=1,
                                    break_point=None,
                                    mean_change_per_step=0.0,
                                    initial_mean=300,
                                    std=50,
                                    defect_mean=110,
                                    defect_std=50
                                   )

Einsinktiefe_StateController = RandomDefectStateController(failure_probability=0.01,
                                   ok_controller=s4_1,
                                   defect_controller=s4_2)
Einsinktiefe = Feature("Ftr4", "Feature4", victim=Löten,
               distribution_state_controller=Einsinktiefe_StateController)

# todo wie sollen features die "normal" aus distribution gezogen werden einfluss auf das label haben?
# todo --> macht das sinn dass diese features keinen einfluss haben? was soll zb beim strom schiefgehen?

#Kleben

# random walk
Temperatur = Feature("Ftr6", "Feature6", victim=Kleben, random_walk=True,
               distribution={"Feature": {"Normal": {"mean": 190, "stdev": 10, "min": 180, "max": 205}}})

# random defect controller
s7_1 = ContinuosNormalDistribution(wear_per_step=1,
                                           break_point=None,
                                           mean_change_per_step=0.0,
                                           initial_mean=400,
                                           std=50,
                                           defect_mean=10,
                                           defect_std=5
                                           )

s7_2 = ContinuosNormalDistribution(wear_per_step=1,
                                    break_point=None,
                                    mean_change_per_step=0.0,
                                    initial_mean=500,
                                    std=50,
                                    defect_mean=110,
                                    defect_std=50
                                    )
# TODO implement state controller that allows two different random defect distributions (too much/too few)
Menge_StateController = RandomDefectStateController(failure_probability=0.01,
                                   ok_controller=s7_1,
                                   defect_controller=s7_2)
Menge = Feature("Ftr7", "Feature7", victim=Kleben, distribution_state_controller=Menge_StateController)

# evtl verwandt mit menge?
Durchflussgeschwindigkeit = Feature("Ftr5", "Feature5", victim=Kleben,
               dependent={"Function": "0.9*X", "X": Menge})

StecktFest = Failure("Flr0", "Failure0", victim=Kleben, entity=True,
               distribution={"TTF": {"Fixed": {"mean": 0.5}}, "TTR": {"Normal": {"mean": 2,"stdev": 0.2, "min":0, "probability": 0.01}}})


# Routing
S.defineRouting([Löten])
Löten.defineRouting([S], [Q])
Q.defineRouting([Löten], [Kleben])
Kleben.defineRouting([Q], [E1])
E1.defineRouting([Kleben])


def main(test=0):
    maxSimTime = 5000
    objectList = [S, Löten, Q, Kleben, E1, Spannung, Strom, Widerstand, Kraft, Einsinktiefe, Durchflussgeschwindigkeit, Temperatur, Menge, StecktFest]
    db = ManPyQuestDBDatabase()
    runSimulation(objectList, maxSimTime, db=None)

    # return Results for test
    if test:
        result = {}
        for o in objectList:
            if type(o) == Feature:
                result[o.id] = o.featureHistory
        result["Discards"] = Kleben.discards
        result["Exits"] = E1.numOfExits
        result["Entities"] = G.EntityList

        return result

    # df = G.get_simulation_results_dataframe()
    # ExcelPrinter(df, "EnahncedExampleLine")
    df = getEntityData()
    df.to_csv("EnhancedExampleLine.csv", index=False, encoding="utf8")

    print("""
            Ausschuss:          {}
            Produziert:         {}
            Blockiert für:      {:.2f}
            Simulationszeit:    {}
            Laufzeit:           {:.2f}
            """.format(len(Kleben.discards), E1.numOfExits, Kleben.totalBlockageTime, maxSimTime, time.time() - start))

if __name__ == "__main__":
    main()
